/*
 * Copyright (c) 2010 Unpublished Work of Novell, Inc. All Rights Reserved.
 *
 * THIS WORK IS AN UNPUBLISHED WORK AND CONTAINS CONFIDENTIAL,
 * PROPRIETARY AND TRADE SECRET INFORMATION OF NOVELL, INC. ACCESS TO
 * THIS WORK IS RESTRICTED TO (I) NOVELL, INC. EMPLOYEES WHO HAVE A NEED
 * TO KNOW HOW TO PERFORM TASKS WITHIN THE SCOPE OF THEIR ASSIGNMENTS AND
 * (II) ENTITIES OTHER THAN NOVELL, INC. WHO HAVE ENTERED INTO
 * APPROPRIATE LICENSE AGREEMENTS. NO PART OF THIS WORK MAY BE USED,
 * PRACTICED, PERFORMED, COPIED, DISTRIBUTED, REVISED, MODIFIED,
 * TRANSLATED, ABRIDGED, CONDENSED, EXPANDED, COLLECTED, COMPILED,
 * LINKED, RECAST, TRANSFORMED OR ADAPTED WITHOUT THE PRIOR WRITTEN
 * CONSENT OF NOVELL, INC. ANY USE OR EXPLOITATION OF THIS WORK WITHOUT
 * AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND CIVIL
 * LIABILITY.
 *
 * ========================================================================
 */
package org.spiffyui.client.rest;

import com.google.gwt.json.client.JSONValue;

/**
 * <p>
 *  This interface is used when calling REST APIs in conjunction with RESTility.
 * </p>
 * 
 * <p>
 * RESTCallback is the low level interface for handling JSON and HTTP.  This
 * interface gets access to errors generated by the HTTP call and the raw
 * JSON values the REST call returns.  This interface is typically used
 * in conjunction with a RESTObjectCallBack.  The RESTCallback handles converting
 * the JSON data structure into an object and then returns those data structures
 * to the RESTObjectCallBack.
 * </p>
 * 
 * @see RESTObjectCallBack
 * @see RESTility
 */
public interface RESTCallback
{
    
    /**
     * <p>
     * Called when the REST call completes successfully.
     * </p>
     * 
     * <p>
     * A successful REST request is one that returned a value from the server
     * containing well formed JSON which did not contain an NCAC error message
     * or an authentication request.  Successful REST requests may return any
     * HTTP response code and are not limited to 200.
     * </p>
     * 
     * @param val    The JSON value from the REST call
     */
    public void onSuccess(JSONValue val);
    
    /**
     * <p>
     * Called if there is an unexpected error calling the REST API.
     * </p>
     * 
     * <p>
     * This method is called for unexpected errors including network 
     * failures, data loss, and server responses which aren't well
     * formed JSON.  
     * </p>
     * 
     * @param statusCode the HTTP status code with the error
     * @param errorResponse
     *                   the error message response from the REST endpoint
     */
    public void onError(int statusCode, String errorResponse);
    
    /**
     * <p>
     * Called if the REST endpoint returns a valid response with an 
     * error message following in the 
     * <a href="http://www.w3.org/TR/soap12-part1/#soapfault">SOAP error 
     * format</a> encoded in JSON.
     * </p>
     * 
     * <p>
     * REST calls in this framework have built-in error handling to parse
     * a strict format of error message in JSON and represent it as a Java
     * object.  These message represente well know errors and are often
     * part of the public API for a REST interface.
     * </p>
     * 
     * <p>
     * These error messages follow a JSON format of the standard SOAP error
     * message.  The basic structure looks like this:
     * </p>
     * 
     * <pre>
     * {
     *     "Fault": {
     *         "Code": {
     *             "Value": "Sender",
     *             "Subcode": {
     *                 "Value": "MessageTimeout" 
     *             } 
     *         },
     *         "Reason": {
     *             "Text": "Sender Timeout" 
     *         },
     *         "Detail": {
     *             "MaxTime": "P5M" 
     *         } 
     *     }
     * }
     * </pre>
     * 
     * <p>
     * The detail section is reserved for additional properties of 
     * the specific error message.
     * </p>
     * 
     * @param e      the RESTException
     */
    public void onError(RESTException e);
    
}
