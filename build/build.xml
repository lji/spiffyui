<?xml version="1.0" encoding="UTF-8"?>
<project name="Spiffy UI" xmlns:ivy="antlib:org.apache.ivy.ant" default="spiffy" basedir="..">
    <target name="spiffy" depends="setup,resolve">
        <antcall target="compile"/>
        <antcall target="js-lint" />
        <antcall target="js-min" />
        <antcall target="css-min" />
        <antcall target="package" />
    </target>
    
    <target name="resolve" description="--> retrieve dependencies with ivy" unless="build.from.maven" depends="ivySettings">
        <property name="ivy.lib.dir" value="${spiffy.root}/lib"/>
        <ivy:retrieve file="${spiffy.root}/ivy.xml" log="download-only" />
        
        <subant antfile="build2.xml"
                buildpath="${spiffy.root}/build/">
            <property name="spiffy.root" value="${spiffy.root}"/>
        </subant>
    </target>
    
    <target name="ivySettings" description="--> Setup ivy settings" unless="build.from.maven">
        <ivy:settings file="${spiffy.build}/ivysettings.xml" />
    </target>
    
    <target name="setup">
        <property environment="env"/>

        <!-- These are all the project relative paths.  Please add new paths
             here so they are easier to find when they change. -->
        <condition property="build.spiffy.base" value="${env.SPIFFY_BASE}" else="${basedir}">
          <isset property="${env.SPIFFY_BASE}"/>
        </condition>
    	
    	<!-- Establish a "run from maven" property so that conditional logic
    	     can be added when out-of-the box ant does not work in the same way
    	     as maven-antrun-plugin -->
    	<condition property="build.javac.fork" value="${build.from.maven}" else="false">
          <isset property="build.from.maven"/>
        </condition>
        
        <echo message="Spffy UI base directory: ${build.spiffy.base}" />
        <property name="spiffy.root" location="${build.spiffy.base}"/>
        <property name="spiffy.build" location="${build.spiffy.base}/build"/>
        <property name="spiffy.dist" location="${build.spiffy.base}/dist"/>
        <property name="spiffy.build.lib" location="${build.spiffy.base}/build/lib"/>
        <property name="spiffy.build.classes" location="${build.spiffy.base}/build/classes"/>
        
        <property name="spiffy.www"  location="${build.spiffy.base}/target/dist"/>
        <property name="spiffy.classes"  location="${build.spiffy.base}/target/classes"/>
        
        <mkdir dir="${spiffy.www}"/>
        <mkdir dir="${spiffy.classes}"/>
        <mkdir dir="${spiffy.dist}"/>
        <property name="spiffy.js"  location="${build.spiffy.base}/src/main/js"/>
        <property name="spiffy.css"  location="${build.spiffy.base}/src/main/css"/>
        
        <property name="gwt.compiler.output" value="OBF"/>
        
        <property name="ant.home" location="${build.rpt.base}/external/ant"/>
        <property name="ant.lib" location="${build.rpt.base}/external/ant/lib"/>
    </target>

    <target name="compile">
        <!-- Compile all the Java -->
        <javac
        srcdir="${spiffy.root}/src/main/java" destdir="${spiffy.classes}"
               target="1.5" source="1.5" debug="true" deprecation="yes"
               includeantruntime="false">
            <compilerarg value="-Xlint" />
            <classpath>
                <fileset dir="${spiffy.root}/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${spiffy.root}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </javac>
    </target>
    
    <target name="compileClosureTask.check">
        <condition property="closuretask.is.compiled">
            <not>
                <available file="${spiffy.dist}/spiffytasks.jar"/>
            </not>
        </condition>
    </target>
    
    <!--  The compile closure task. -->
    <target name="compileClosureTask" if="closuretask.is.compiled" depends="setup,compileClosureTask.check">
        <mkdir dir="${spiffy.build.classes}"/>
        <javac srcdir="${spiffy.build}/src" destdir="${spiffy.build.classes}" target="1.5" 
                    includes="org/spiffyui/build/**"
                    source="1.5" debug="true" deprecation="yes" includeantruntime="false"
        	        fork="${build.javac.fork}">
            <compilerarg value="-Xlint" />
            <classpath>
                <pathelement location="${spiffy.build}/lib/closure-compiler.jar"/>
                <pathelement path="${java.class.path}"/>
                <!-- Adding this so that maven builds will include the necessary ant dependencies -->
                <pathelement path="${compile_classpath}"/>
            </classpath>
        </javac>
        
        <jar destfile="${spiffy.dist}/spiffytasks.jar">
            <zipfileset dir="${spiffy.build.classes}" prefix="" >
                <include name="org/spiffyui/build/*.*"/>
            </zipfileset>
            <zipfileset dir="${spiffy.build}/src" prefix="" >
                <include name="tasks.properties"/>
            </zipfileset>
        </jar>
    </target>

    <target name="taskdefs">
        <taskdef resource="tasks.properties">
            <classpath>
                <fileset dir="${spiffy.dist}" includes="*.jar"/>
                <fileset dir="${spiffy.build}/lib" includes="*.jar"/>
            </classpath>
        </taskdef>
    </target>
    
    <target name="js-min" description="Minimize the JavaScript with the Closure compiler" depends="setup,js-lint,compileClosureTask.check,compileClosureTask,taskdefs">
        <!-- Now we compile our JavaScript. -->
        <closure jsfile="${spiffy.www}/spiffyui.min.js" 
                 closurejar="${spiffy.build}/lib/closure-compiler.jar"
                 compilationLevel="SIMPLE_OPTIMIZATIONS"
                 warninglevel="DEFAULT">
            <fileset dir="${spiffy.js}" includes="**/*.js" excludes="**/jquery-1.*.js, **/unittest/**, **/lib/i18n/**" />
        </closure>

        <!-- Then we GZIP it for web servers that support GZIP -->
        <gzip src="${spiffy.www}/spiffyui.min.js" destfile="${spiffy.www}/spiffyui.min.js.gz"/>
        
        <!-- We also compile our own copy of JQuery -->
        <closure jsfile="${spiffy.www}/jquery.min.js" 
                 closurejar="${spiffy.build}/lib/closure-compiler.jar"
                 compilationLevel="SIMPLE_OPTIMIZATIONS"
                 warninglevel="QUIET">
            <fileset dir="${spiffy.js}/lib" includes="jquery-1.5.2.js" />
        </closure>

        <!-- Then we GZIP JQuery for web servers that support GZIP -->
        <gzip src="${spiffy.www}/jquery.min.js" destfile="${spiffy.www}/jquery.min.js.gz"/>
        
        <!-- We copy over all the JavaScript files for dev mode -->
        <mkdir dir="${spiffy.www}/js"/>
        <copy todir="${spiffy.www}/js">
            <fileset dir="${spiffy.js}" includes="**/*" />
        </copy>
        
    </target>
    
    <target name="css-min" description="Minimize the CSS with the YUI compiler" depends="setup">
        <concat destfile="${spiffy.www}/spiffyui.css" force="yes">
            <!-- Since Cascading Style Sheets cascade the order is important here.  We need to make sure
                  That we load in the right order so different styles can be overwriten. -->
            <fileset dir="${spiffy.js}" includes="**/*.css" />
            <fileset dir="${spiffy.css}" includes="*.css" excludes="spiffyui.ie.css" />
        </concat>

        <java classname="com.yahoo.platform.yui.compressor.Bootstrap"
            fork="true" failonerror="true" maxmemory="256m">
            <arg value="-o"/>
            <arg value="${spiffy.www}/spiffyui.min.css"/>
            <arg value="${spiffy.www}/spiffyui.css"/>
            <classpath>
                <fileset dir="${spiffy.build}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
                <!-- Adding this so that maven builds will include the necessary ant dependencies -->
                <pathelement path="${compile_classpath}"/>
            </classpath>
        </java>

        <!-- Now that we have created the compressed file we don't
             need the concatenated file -->
        <delete file="${spiffy.www}/spiffyui.css" />

        <!-- Then we can GZIP the file -->
        <gzip src="${spiffy.www}/spiffyui.min.css" destfile="${spiffy.www}/spiffyui.min.css.gz"/>
        
        <!-- Now we copy over the images that we use for our CSS -->
        <mkdir dir="${spiffy.www}/images"/>
        <copy todir="${spiffy.www}/images">
            <fileset dir="${spiffy.css}/images" includes="**/*" />
        </copy>
        
        <copy todir="${spiffy.www}">
            <fileset dir="${spiffy.css}" includes="*.css" />
        </copy>
    </target>
    
    <!-- Run JSLINT against our JavaScript -->
    <target name="js-lint">
        <taskdef name="jslint" classname="com.googlecode.jslint4java.ant.JSLintTask">
            <classpath>
                <fileset dir="${spiffy.build}/lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        
        <jslint>
            <formatter type="plain" />
            <fileset dir="${spiffy.js}" includes="**/*.js" excludes="**/jquery-1.*.js, **/lib/**,**/unittest/**" />
        </jslint>
    </target>
    
    <target name="spiffy.clean" depends="setup">
        <delete dir="${spiffy.www}"/>
        <delete dir="${spiffy.classes}"/>
        <delete dir="${spiffy.dist}"/>
        <delete dir="${spiffy.build}/classes"/>
        <delete>
            <fileset dir="${spiffy.build}/lib" includes="*.jar" excludes="*closure*.jar"/>
        </delete>
        <delete dir="${spiffy.root}/lib"/>
        <delete dir="${spiffy.root}/target"/>
    </target>

    <target name="package">
        <jar destfile="${spiffy.dist}/spiffyui.jar">
            <zipfileset dir="${spiffy.classes}" prefix="" >
                <include name="**/*.*"/>
            </zipfileset>
            <zipfileset dir="${spiffy.www}" prefix="org/spiffyui/public" >
                <include name="**/*.*"/>
            </zipfileset>
            <zipfileset dir="${spiffy.root}/src/main/java" prefix="" >
                <include name="**/*.*"/>
            </zipfileset>
        </jar>
    </target>

</project>


